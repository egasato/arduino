# Definimos la versión mínima de CMake necesaria
# Set the minimum required CMake version
cmake_minimum_required(VERSION 3.2)

# Definimos el nombre del proyecto y el lenguaje preferido (C++)
# Set the project name and preferred language (C++)
project(arduino CXX)

# Incluimos el archivo generado por PlatformIO que incluye los archivos y
# configura el compilador entre otras cosas
# Include the CMake file generated by PlatformIO that includes all the source
# files and configures the compiler among other things
include(CMakeListsPrivate.txt)

# Habilitamos C++11 añadiendo una definición a los parametros de compilación
# Enable C++11 by adding a definition/flag to the compilation arguments
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")

# Definimos todas las tareas/objetivos que harán que CMake use PlatformIO
# Set all targets that will configure CMake to use PlatformIO

add_custom_target(
	PLATFORMIO_BUILD ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion run
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_UPLOAD ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion run --target upload
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_CLEAN ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion run --target clean
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_TEST ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion test
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_PROGRAM ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion run --target program
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_UPLOADFS ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion run --target uploadfs
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_UPDATE_ALL ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion update
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

add_custom_target(
	PLATFORMIO_REBUILD_PROJECT_INDEX ALL
	COMMAND ${PLATFORMIO_CMD} -f -c clion init --ide clion
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

# Definimos como compilar el ejecutable pasando la lista de archivos
# Set how to compile the executable by passing the list of sources
add_executable(${PROJECT_NAME} ${SRC_LIST})